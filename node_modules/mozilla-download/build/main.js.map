{"version":3,"sources":["../src/main.js"],"names":[],"mappings":";;;;;;iBA+C8B,IAAI;;IA/CzB,cAAc,WAAQ,UAAU,EAAhC,cAAc;;IAChB,KAAK,2BAAM,OAAO;;IAClB,QAAQ,2BAAM,YAAY;;IAC1B,SAAS,2BAAM,aAAa;;IAC5B,QAAQ,2BAAM,YAAY;;IAC1B,OAAO,2BAAM,WAAW;;IACnB,SAAS,mCAAM,kBAAkB;;AAE7C,KAAK,GAAG,KAAK,CAAC,uBAAuB,CAAC,CAAC;;AAEvC,IAAI,MAAM,GAAG,IAAI,cAAc,CAAC;AAC9B,SAAO,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO;AACtC,aAAW,EAAE,yDAAyD;AACtE,SAAO,EAAE,KAAK;CACf,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,EAAE;AAChC,MAAI,EAAE,QAAQ;AACd,MAAI,EAAE,8CAA8C;AACpD,cAAY,EAAE,aAAa;CAC5B,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,EAAE;AAC3B,MAAI,EAAE,QAAQ;AACd,MAAI,EAAE,4CAA4C;AAClD,cAAY,EAAE,QAAQ,EAAE;CACzB,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,EAAE;AAC/B,MAAI,EAAE,QAAQ;AACd,cAAY,EAAE,iBAAiB;CAChC,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,EAAE;AAC9B,MAAI,EAAE,KAAK;AACX,cAAY,EAAE,CAAC;CAChB,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,EAAE;AACpC,MAAI,EAAE,QAAQ;AACd,MAAI,EAAE,YAAY;CACnB,CAAC,CAAC;;AAEH,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,EAAE;AAC3B,MAAI,EAAE,QAAQ;CACf,CAAC,CAAC;;AAEY,SAAe,IAAI;MAAC,IAAI,gCAAC,MAAM,CAAC,SAAS,EAAE;MAElD,GAAG,EAEH,IAAI,EAEJ,WAAW,EAET,KAAK,EAIL,EAAE;;;;;;eAVQ,SAAS,CAAC,IAAI,CAAC;;;AAA3B,WAAG;;AACP,aAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;;eACV,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC;;;AAAhC,YAAI;;AACR,aAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AACvB,mBAAW,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;;AAC1E,YAAI,IAAI,CAAC,UAAU,EAAE;AACf,eAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;;AACtC,qBAAW,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAChD,MAAM;AAED,YAAE,GAAG,IAAI,CAAC,EAAE;;AAChB,qBAAW,CAAC,QAAQ,GAAG,SAAS,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;SACtD;;;eAEK,OAAO,CAAC,WAAW,CAAC;;;;;;;;;;AAE1B,eAAO,CAAC,KAAK,CAAC,eAAM,QAAQ,EAAE,CAAC,CAAC;;;;;;;CAEnC","file":"src/main.js","sourcesContent":["import { ArgumentParser } from 'argparse';\nimport debug from 'debug';\nimport detectOS from './detectos';\nimport detectURL from './detecturl';\nimport download from './download';\nimport extract from './extract';\nimport * as buildinfo from './moz_build_info';\n\ndebug = debug('mozilla-download/main');\n\nlet parser = new ArgumentParser({\n  version: require('../package').version,\n  description: 'Utility to download gecko builds from taskcluster index',\n  addHelp: false\n});\n\nparser.addArgument(['--product'], {\n  type: 'string',\n  help: 'Name for gecko build (ie b2g-desktop, mulet)',\n  defaultValue: 'b2g-desktop'\n});\n\nparser.addArgument(['--os'], {\n  type: 'string',\n  help: 'OS to download build for (ie linux-x86_64)',\n  defaultValue: detectOS()\n});\n\nparser.addArgument(['--branch'], {\n  type: 'string',\n  defaultValue: 'mozilla-central'\n});\n\nparser.addArgument(['--debug'], {\n  type: 'int',\n  defaultValue: 0\n});\n\nparser.addArgument(['--file-suffix'], {\n  type: 'string',\n  dest: 'fileSuffix'\n});\n\nparser.addArgument(['dest'], {\n  type: 'string'\n});\n\nexport default async function main(args=parser.parseArgs()) {\n  try {\n    let url = await detectURL(args);\n    debug('Artifact url', url);\n    let path = await download(url, args);\n    debug('Download to', path);\n    let extractOpts = { source: path, dest: args.dest, product: args.product };\n    if (args.fileSuffix) {\n      let parts = args.fileSuffix.split('.');\n      extractOpts.filetype = parts[parts.length - 1];\n    } else {\n      // They want the regular old build archive.\n      let os = args.os;\n      extractOpts.filetype = buildinfo.archiveFiletype(os);\n    }\n\n    await extract(extractOpts);\n  } catch (error) {\n    console.error(error.toString());\n  }\n}\n"]}