"use strict";

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { "default": obj }; };

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

module.exports = main;

var ArgumentParser = require("argparse").ArgumentParser;

var debug = _interopRequire(require("debug"));

var detectOS = _interopRequire(require("./detectos"));

var detectURL = _interopRequire(require("./detecturl"));

var download = _interopRequire(require("./download"));

var extract = _interopRequire(require("./extract"));

var buildinfo = _interopRequireWildcard(require("./moz_build_info"));

debug = debug("mozilla-download/main");

var parser = new ArgumentParser({
  version: require("../package").version,
  description: "Utility to download gecko builds from taskcluster index",
  addHelp: false
});

parser.addArgument(["--product"], {
  type: "string",
  help: "Name for gecko build (ie b2g-desktop, mulet)",
  defaultValue: "b2g-desktop"
});

parser.addArgument(["--os"], {
  type: "string",
  help: "OS to download build for (ie linux-x86_64)",
  defaultValue: detectOS()
});

parser.addArgument(["--branch"], {
  type: "string",
  defaultValue: "mozilla-central"
});

parser.addArgument(["--debug"], {
  type: "int",
  defaultValue: 0
});

parser.addArgument(["--file-suffix"], {
  type: "string",
  dest: "fileSuffix"
});

parser.addArgument(["dest"], {
  type: "string"
});

function main() {
  var args = arguments[0] === undefined ? parser.parseArgs() : arguments[0];
  var url, path, extractOpts, parts, os;
  return regeneratorRuntime.async(function main$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return detectURL(args);

      case 3:
        url = context$1$0.sent;

        debug("Artifact url", url);
        context$1$0.next = 7;
        return download(url, args);

      case 7:
        path = context$1$0.sent;

        debug("Download to", path);
        extractOpts = { source: path, dest: args.dest, product: args.product };

        if (args.fileSuffix) {
          parts = args.fileSuffix.split(".");

          extractOpts.filetype = parts[parts.length - 1];
        } else {
          os = args.os;

          extractOpts.filetype = buildinfo.archiveFiletype(os);
        }

        context$1$0.next = 13;
        return extract(extractOpts);

      case 13:
        context$1$0.next = 18;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t1 = context$1$0["catch"](0);

        console.error(context$1$0.t1.toString());

      case 18:
      case "end":
        return context$1$0.stop();
    }
  }, null, this, [[0, 15]]);
}

// They want the regular old build archive.
//# sourceMappingURL=main.js.map